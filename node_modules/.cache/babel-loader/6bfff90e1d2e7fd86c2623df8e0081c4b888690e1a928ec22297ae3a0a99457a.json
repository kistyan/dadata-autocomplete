{"ast":null,"code":"var _jsxFileName = \"/home/kistyan/test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DADATA_TOKEN = '077c2359913a904470c191acdb2795ab64204c5f';\nexport default function FreeSolo() {\n  _s();\n  const [suggestions, setSuggestions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = async event => {\n    const value = event.target.value;\n    setInputValue(value);\n    if (value) {\n      try {\n        const response = await fetch('https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Token ' + DADATA_TOKEN\n          },\n          body: JSON.stringify({\n            query: value\n          })\n        });\n        const data = await response.json();\n        console.log(data);\n        setSuggestions(data.suggestions.map(suggestion => suggestion.value));\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n  const highlightMatch = (option, inputValue) => {\n    const regex = new RegExp(inputValue, 'gi');\n    const parts = option.split(regex);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: parts.map((part, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [part, index !== parts.length - 1 && /*#__PURE__*/_jsxDEV(\"b\", {\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 44\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n      ...params,\n      label: \"\\u0410\\u0434\\u0440\\u0435\\u0441\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 32\n    }, this),\n    freeSolo: true,\n    filterOptions: x => x,\n    options: suggestions,\n    onInputChange: handleInputChange,\n    renderOption: option => highlightMatch(option, inputValue)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(FreeSolo, \"OMIk65ZnoUS1Z6cCYjiknxtR2BQ=\");\n_c = FreeSolo;\nvar _c;\n$RefreshReg$(_c, \"FreeSolo\");","map":{"version":3,"names":["React","useState","TextField","Autocomplete","jsxDEV","_jsxDEV","DADATA_TOKEN","FreeSolo","_s","suggestions","setSuggestions","inputValue","setInputValue","handleInputChange","event","value","target","response","fetch","method","headers","body","JSON","stringify","query","data","json","console","log","map","suggestion","error","highlightMatch","option","regex","RegExp","parts","split","children","part","index","length","fileName","_jsxFileName","lineNumber","columnNumber","renderInput","params","label","freeSolo","filterOptions","x","options","onInputChange","renderOption","_c","$RefreshReg$"],"sources":["/home/kistyan/test/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nconst DADATA_TOKEN = '077c2359913a904470c191acdb2795ab64204c5f';\n\nexport default function FreeSolo() {\n  const [suggestions, setSuggestions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = async (event) => {\n    const value = event.target.value;\n    setInputValue(value);\n    if (value) {\n      try {\n        const response = await fetch('https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Token ' + DADATA_TOKEN\n          },\n          body: JSON.stringify({\n            query: value\n          })\n        });\n        const data = await response.json();\n\tconsole.log(data);\n        setSuggestions(data.suggestions.map(suggestion => suggestion.value));\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const highlightMatch = (option, inputValue) => {\n    const regex = new RegExp(inputValue, 'gi');\n    const parts = option.split(regex);\n    return (\n      <span>\n        {parts.map((part, index) => (\n          <span key={index}>\n            {part}\n            {index !== parts.length - 1 && <b>{inputValue}</b>}\n          </span>\n        ))}\n      </span>\n    );\n  };\n\n  return (\n    <Autocomplete\n      renderInput={(params) => <TextField {...params} label='Адрес' />}\n      freeSolo\n      filterOptions={(x) => x}\n      options={suggestions}\n      onInputChange={handleInputChange}\n      renderOption={(option) => highlightMatch(option, inputValue)}\n    />\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
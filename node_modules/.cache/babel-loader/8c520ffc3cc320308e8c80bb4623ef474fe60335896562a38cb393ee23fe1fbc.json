{"ast":null,"code":"var _jsxFileName = \"/home/kistyan/test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DADATA_TOKEN = '077c2359913a904470c191acdb2795ab64204c5f';\n/*\nconst DADATA_TOKEN = 'b64560af54b95583ac2711f8ecb9744514f08b11';\n*/\n\nexport default function DaDataAutocomplete(_ref) {\n  _s();\n  let {\n    type = 'address',\n    value = '',\n    initialQuery = '',\n    inputProps\n  } = _ref;\n  const [suggestions, setSuggestions] = useState([]);\n  const handleInputChange = async event => {\n    const inputValue = event.target.value;\n    if (inputValue) {\n      try {\n        const response = await fetch('https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/' + type, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Token ' + DADATA_TOKEN\n          },\n          body: JSON.stringify({\n            query: inputValue\n          })\n        });\n        const data = await response.json();\n        setSuggestions(data.suggestions.map(suggestion => suggestion.value));\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    freeSolo: true,\n    filterOptions: x => x,\n    options: suggestions,\n    onInputChange: handleInputChange,\n    inputValue: initialQuery,\n    ...inputProps,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n      ...params,\n      label: \"\\u0410\\u0434\\u0440\\u0435\\u0441\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 32\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(DaDataAutocomplete, \"xLFRUKi5CexG/Qcuhka4a4H1SoY=\");\n_c = DaDataAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"DaDataAutocomplete\");","map":{"version":3,"names":["React","useState","TextField","Autocomplete","jsxDEV","_jsxDEV","DADATA_TOKEN","DaDataAutocomplete","_ref","_s","type","value","initialQuery","inputProps","suggestions","setSuggestions","handleInputChange","event","inputValue","target","response","fetch","method","headers","body","JSON","stringify","query","data","json","map","suggestion","error","console","log","freeSolo","filterOptions","x","options","onInputChange","renderInput","params","label","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kistyan/test/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nconst DADATA_TOKEN = '077c2359913a904470c191acdb2795ab64204c5f';\n/*\nconst DADATA_TOKEN = 'b64560af54b95583ac2711f8ecb9744514f08b11';\n*/\n\nexport default function DaDataAutocomplete({\n  type='address',\n  value='',\n  initialQuery='',\n  inputProps\n}) {\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleInputChange = async (event) => {\n    const inputValue = event.target.value;\n    if (inputValue) {\n      try {\n        const response = await fetch('https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/' + type, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Token ' + DADATA_TOKEN\n          },\n          body: JSON.stringify({\n            query: inputValue\n          })\n        });\n        const data = await response.json();\n        setSuggestions(data.suggestions.map(suggestion => suggestion.value));\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  }\n\n  return (\n    <Autocomplete\n      freeSolo={true}\n      filterOptions={(x) => x}\n      options={suggestions}\n      onInputChange={handleInputChange}\n      inputValue={initialQuery}\n      {...inputProps}\n      renderInput={(params) => <TextField {...params} label='Адрес' />}\n    />\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,YAAY,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,YAAY,GAAG,0CAA0C;AAC/D;AACA;AACA;;AAEA,eAAe,SAASC,kBAAkBA,CAAAC,IAAA,EAKvC;EAAAC,EAAA;EAAA,IALwC;IACzCC,IAAI,GAAC,SAAS;IACdC,KAAK,GAAC,EAAE;IACRC,YAAY,GAAC,EAAE;IACfC;EACF,CAAC,GAAAL,IAAA;EACC,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMe,iBAAiB,GAAG,MAAOC,KAAK,IAAK;IACzC,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM,CAACR,KAAK;IACrC,IAAIO,UAAU,EAAE;MACd,IAAI;QACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,+DAA+D,GAAGX,IAAI,EAAE;UACnGY,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,QAAQ,GAAGjB;UAC9B,CAAC;UACDkB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,KAAK,EAAET;UACT,CAAC;QACH,CAAC,CAAC;QACF,MAAMU,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCd,cAAc,CAACa,IAAI,CAACd,WAAW,CAACgB,GAAG,CAACC,UAAU,IAAIA,UAAU,CAACpB,KAAK,CAAC,CAAC;MACtE,CAAC,CAAC,OAAOqB,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF,CAAC,MAAM;MACLjB,cAAc,CAAC,EAAE,CAAC;IACpB;EACF,CAAC;EAED,oBACEV,OAAA,CAACF,YAAY;IACXgC,QAAQ,EAAE,IAAK;IACfC,aAAa,EAAGC,CAAC,IAAKA,CAAE;IACxBC,OAAO,EAAExB,WAAY;IACrByB,aAAa,EAAEvB,iBAAkB;IACjCE,UAAU,EAAEN,YAAa;IAAA,GACrBC,UAAU;IACd2B,WAAW,EAAGC,MAAM,iBAAKpC,OAAA,CAACH,SAAS;MAAA,GAAKuC,MAAM;MAAEC,KAAK,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClE,CAAC;AAEN;AAACrC,EAAA,CA3CuBF,kBAAkB;AAAAwC,EAAA,GAAlBxC,kBAAkB;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
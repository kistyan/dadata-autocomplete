{"ast":null,"code":"var _jsxFileName = \"/home/kistyan/test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DADATA_TOKEN = '077c2359913a904470c191acdb2795ab64204c5f';\nexport default function DaDataAutocomplete(_ref) {\n  _s();\n  let {\n    type = 'address',\n    value = 'Белг'\n  } = _ref;\n  const [suggestions, setSuggestions] = useState([]);\n  const updateSuggestions = async query => {\n    if (query) {\n      try {\n        const response = await fetch('https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/' + type, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Token ' + DADATA_TOKEN\n          },\n          body: JSON.stringify({\n            query: query\n          })\n        });\n        const data = await response.json();\n        setSuggestions(data.suggestions.map(suggestion => suggestion.value));\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n  const handleInputChange = async event => {\n    if (event) {\n      updateSuggestions(event.target.value);\n    }\n  };\n  updateSuggestions(value);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n      ...params,\n      label: \"\\u0410\\u0434\\u0440\\u0435\\u0441\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 32\n    }, this),\n    freeSolo: true,\n    filterOptions: x => x,\n    options: suggestions,\n    onInputChange: handleInputChange\n    /*      onFocus={handleInputChange} */,\n    value: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(DaDataAutocomplete, \"xLFRUKi5CexG/Qcuhka4a4H1SoY=\");\n_c = DaDataAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"DaDataAutocomplete\");","map":{"version":3,"names":["React","useState","TextField","Autocomplete","jsxDEV","_jsxDEV","DADATA_TOKEN","DaDataAutocomplete","_ref","_s","type","value","suggestions","setSuggestions","updateSuggestions","query","response","fetch","method","headers","body","JSON","stringify","data","json","map","suggestion","error","console","log","handleInputChange","event","target","renderInput","params","label","fileName","_jsxFileName","lineNumber","columnNumber","freeSolo","filterOptions","x","options","onInputChange","_c","$RefreshReg$"],"sources":["/home/kistyan/test/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nconst DADATA_TOKEN = '077c2359913a904470c191acdb2795ab64204c5f';\n\nexport default function DaDataAutocomplete({\n  type='address',\n  value='Белг'\n}) {\n  const [suggestions, setSuggestions] = useState([]);\n\n  const updateSuggestions = async (query) => {\n    if (query) {\n      try {\n        const response = await fetch('https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/' + type, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Token ' + DADATA_TOKEN\n          },\n          body: JSON.stringify({\n            query: query\n          })\n        });\n        const data = await response.json();\n        setSuggestions(data.suggestions.map(suggestion => suggestion.value));\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  }\n\n  const handleInputChange = async (event) => {\n    if (event) {\n      updateSuggestions(event.target.value);\n    }\n  };\n\n  updateSuggestions(value);\n\n  return (\n    <Autocomplete\n      renderInput={(params) => <TextField {...params} label='Адрес' />}\n      freeSolo={true}\n      filterOptions={(x) => x}\n      options={suggestions}\n      onInputChange={handleInputChange}\n/*      onFocus={handleInputChange} */\n      value={value}\n    />\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,YAAY,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,YAAY,GAAG,0CAA0C;AAE/D,eAAe,SAASC,kBAAkBA,CAAAC,IAAA,EAGvC;EAAAC,EAAA;EAAA,IAHwC;IACzCC,IAAI,GAAC,SAAS;IACdC,KAAK,GAAC;EACR,CAAC,GAAAH,IAAA;EACC,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMa,iBAAiB,GAAG,MAAOC,KAAK,IAAK;IACzC,IAAIA,KAAK,EAAE;MACT,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+DAA+D,GAAGP,IAAI,EAAE;UACnGQ,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,QAAQ,GAAGb;UAC9B,CAAC;UACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBP,KAAK,EAAEA;UACT,CAAC;QACH,CAAC,CAAC;QACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCX,cAAc,CAACU,IAAI,CAACX,WAAW,CAACa,GAAG,CAACC,UAAU,IAAIA,UAAU,CAACf,KAAK,CAAC,CAAC;MACtE,CAAC,CAAC,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF,CAAC,MAAM;MACLd,cAAc,CAAC,EAAE,CAAC;IACpB;EACF,CAAC;EAED,MAAMiB,iBAAiB,GAAG,MAAOC,KAAK,IAAK;IACzC,IAAIA,KAAK,EAAE;MACTjB,iBAAiB,CAACiB,KAAK,CAACC,MAAM,CAACrB,KAAK,CAAC;IACvC;EACF,CAAC;EAEDG,iBAAiB,CAACH,KAAK,CAAC;EAExB,oBACEN,OAAA,CAACF,YAAY;IACX8B,WAAW,EAAGC,MAAM,iBAAK7B,OAAA,CAACH,SAAS;MAAA,GAAKgC,MAAM;MAAEC,KAAK,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAE;IACjEC,QAAQ,EAAE,IAAK;IACfC,aAAa,EAAGC,CAAC,IAAKA,CAAE;IACxBC,OAAO,EAAE/B,WAAY;IACrBgC,aAAa,EAAEd;IACrB;IACMnB,KAAK,EAAEA;EAAM;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEN;AAAC9B,EAAA,CAhDuBF,kBAAkB;AAAAsC,EAAA,GAAlBtC,kBAAkB;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}